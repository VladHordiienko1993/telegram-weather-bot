/**
 * Internationalization messages
 */
const messages = {


  en: {
    greeting: `Hello! üëã

What city/country are you in?

You can either:
üìç Send your GPS location
‚úçÔ∏è Type city name (e.g., "Berlin, Germany")`,

    help: `ü§ñ Available commands:
/start - Start conversation
/help - Show this help message
/lang - Change language

üìç You can send me:
‚Ä¢ Your location (GPS)
‚Ä¢ City name (e.g., "Berlin, Germany")`,

    locationButton: 'üìç Send my location',
    locationButtonAgain: 'üìç Send location again',
    anotherLocation: 'Want to check weather for another location?',
    unknownMessage: 'Sorry, I don\'t understand that. Use /help to see available commands.',
    error: 'Sorry, something went wrong. Please try again.',
    tryAgain: 'Please try again with a different location.',
    cityNotFound: 'City not found. Please check the spelling.',
    weatherUnavailable: 'Unable to fetch weather data',
    sendLocation: 'Please send your location or type a city name.',
    
    // Language selection
    selectLanguage: 'Please select your language:',
    languageChanged: 'Language changed to English! üá∫üá∏'
  },


  ru: {
    greeting: `–ü—Ä–∏–≤–µ—Ç! üëã

–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ/—Å—Ç—Ä–∞–Ω–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?

–í—ã –º–æ–∂–µ—Ç–µ:
üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å GPS –ª–æ–∫–∞—Ü–∏—é
‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ë–µ—Ä–ª–∏–Ω, –ì–µ—Ä–º–∞–Ω–∏—è")`,

    help: `ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/lang - –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫

üìç –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:
‚Ä¢ –í–∞—à—É –ª–æ–∫–∞—Ü–∏—é (GPS)
‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–ë–µ—Ä–ª–∏–Ω, –ì–µ—Ä–º–∞–Ω–∏—è")`,

    locationButton: 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–æ—é –ª–æ–∫–∞—Ü–∏—é',
    locationButtonAgain: 'üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é –µ—â–µ —Ä–∞–∑',
    anotherLocation: '–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–≥–æ–¥—É –≤ –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ?',
    unknownMessage: '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –ø–æ–Ω–∏–º–∞—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥.',
    error: '–ò–∑–≤–∏–Ω–∏—Ç–µ, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
    tryAgain: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –¥—Ä—É–≥–æ–π –ª–æ–∫–∞—Ü–∏–µ–π.',
    cityNotFound: '–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è.',
    weatherUnavailable: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ',
    sendLocation: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª–æ–∫–∞—Ü–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.',
    
    // Language selection
    selectLanguage: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:',
    languageChanged: '–Ø–∑—ã–∫ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π! üá∑üá∫'
  },


  uk: {
    greeting: `–ü—Ä–∏–≤—ñ—Ç! üëã

–í —è–∫–æ–º—É –º—ñ—Å—Ç—ñ/–∫—Ä–∞—ó–Ω—ñ –≤–∏ –∑–Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å?

–í–∏ –º–æ–∂–µ—Ç–µ:
üìç –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ GPS –ª–æ–∫–∞—Ü—ñ—é
‚úçÔ∏è –ù–∞–ø–∏—Å–∞—Ç–∏ –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–ö–∏—ó–≤, –£–∫—Ä–∞—ó–Ω–∞")`,

    help: `ü§ñ –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:
/start - –ü–æ—á–∞—Ç–∏ –¥—ñ–∞–ª–æ–≥
/help - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É
/lang - –ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É

üìç –í–∏ –º–æ–∂–µ—Ç–µ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏:
‚Ä¢ –í–∞—à—É –ª–æ–∫–∞—Ü—ñ—é (GPS)
‚Ä¢ –ù–∞–∑–≤—É –º—ñ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "–ö–∏—ó–≤, –£–∫—Ä–∞—ó–Ω–∞")`,

    locationButton: 'üìç –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –º–æ—é –ª–æ–∫–∞—Ü—ñ—é',
    locationButtonAgain: 'üìç –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ª–æ–∫–∞—Ü—ñ—é —â–µ —Ä–∞–∑',
    anotherLocation: '–ë–∞–∂–∞—î—Ç–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –ø–æ–≥–æ–¥—É –≤ —ñ–Ω—à–æ–º—É –º—ñ—Å—Ü—ñ?',
    unknownMessage: '–í–∏–±–∞—á—Ç–µ, —è –Ω–µ —Ä–æ–∑—É–º—ñ—é. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /help –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É –∫–æ–º–∞–Ω–¥.',
    error: '–í–∏–±–∞—á—Ç–µ, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.',
    tryAgain: '–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –∑ —ñ–Ω—à–æ—é –ª–æ–∫–∞—Ü—ñ—î—é.',
    cityNotFound: '–ú—ñ—Å—Ç–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω—è.',
    weatherUnavailable: '–ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≥–æ–¥—É',
    sendLocation: '–ë—É–¥—å –ª–∞—Å–∫–∞, –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –ª–æ–∫–∞—Ü—ñ—é –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å –Ω–∞–∑–≤—É –º—ñ—Å—Ç–∞.',
    
    // Language selection
    selectLanguage: '–ë—É–¥—å –ª–∞—Å–∫–∞, –æ–±–µ—Ä—ñ—Ç—å –º–æ–≤—É:',
    languageChanged: '–ú–æ–≤—É –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É! üá∫üá¶'
  },


  pl: {
    greeting: `Cze≈õƒá! üëã

W jakim mie≈õcie/kraju siƒô znajdujesz?

Mo≈ºesz:
üìç Wys≈Çaƒá lokalizacjƒô GPS
‚úçÔ∏è Napisaƒá nazwƒô miasta (np. "Warszawa, Polska")`,

    help: `ü§ñ Dostƒôpne komendy:
/start - Rozpocznij rozmowƒô
/help - Poka≈º tƒô pomoc
/lang - Zmie≈Ñ jƒôzyk

üìç Mo≈ºesz wys≈Çaƒá:
‚Ä¢ SwojƒÖ lokalizacjƒô (GPS)
‚Ä¢ Nazwƒô miasta (np. "Warszawa, Polska")`,

    locationButton: 'üìç Wy≈õlij mojƒÖ lokalizacjƒô',
    locationButtonAgain: 'üìç Wy≈õlij lokalizacjƒô ponownie',
    anotherLocation: 'Chcesz sprawdziƒá pogodƒô w innym miejscu?',
    unknownMessage: 'Przepraszam, nie rozumiem. U≈ºyj /help aby zobaczyƒá komendy.',
    error: 'Przepraszam, co≈õ posz≈Ço nie tak. Spr√≥buj ponownie.',
    tryAgain: 'Spr√≥buj ponownie z innƒÖ lokalizacjƒÖ.',
    cityNotFound: 'Miasto nie znalezione. Sprawd≈∫ pisowniƒô.',
    weatherUnavailable: 'Nie mo≈ºna pobraƒá danych pogodowych',
    sendLocation: 'Proszƒô wy≈õlij lokalizacjƒô lub wpisz nazwƒô miasta.',
    
    // Language selection
    selectLanguage: 'Proszƒô wybierz jƒôzyk:',
    languageChanged: 'Jƒôzyk zmieniony na polski! üáµüá±'
  }


};


// Import User model for database operations
const User = require('../database/models/User');


/**
 * Get user's language from database
 */
async function getUserLanguage(userId) {
  try {
    return await User.getLanguage(userId);
  } catch (error) {
    return 'en'; // Fallback to English
  }
}


/**
 * Set user's language in database
 */
async function setUserLanguage(userId, language) {
  try {
    if (messages[language]) {
      await User.updateLanguage(userId, language);
      return true;
    }
    return false;
  } catch (error) {
    return false;
  }
}


/**
 * Get translated message
 */
async function getMessage(userId, key, fallback = key) {
  try {
    const language = await getUserLanguage(userId);
    const message = messages[language] && messages[language][key];
    
    return message || messages['en'][key] || fallback;
  } catch (error) {
    return messages['en'][key] || fallback;
  }
}


/**
 * Get available languages
 */
function getAvailableLanguages() {
  return Object.keys(messages);
}


module.exports = {
  getMessage,
  setUserLanguage,
  getUserLanguage,
  getAvailableLanguages
};